
#Область СлужебныйПрограммныйИнтерфейс

#Область Метаданные 

// 
////
Функция МетеданныеСправочников() Экспорт 
    
    МетеданныеСправочников = Новый Массив;
    
    Для Каждого Справочник Из Метаданные.Справочники Цикл
        ОписаниеСправочника = ОписаниеСправочника(Справочник);
        МетеданныеСправочников.Добавить(ОписаниеСправочника);
    КонецЦикла;
    
    Возврат МетеданныеСправочников;
    
КонецФункции

// 
////
Функция МетаданныеДокументов() Экспорт 
    
    МетаданныеДокументов = Новый Массив;
    
    Для Каждого Документ Из Метаданные.Документы Цикл
        ОписаниеДокумента = ОписаниеДокумента(Документ);
        МетаданныеДокументов.Добавить(ОписаниеДокумента);
    КонецЦикла;
    
    Возврат МетаданныеДокументов;
    
КонецФункции

// 
////
Функция МетаданныеЖурналовДокументов() Экспорт 
    
    МетаданныеЖурналовДокументов = Новый Массив;
    
    Для Каждого ЖурналДокументов Из Метаданные.ЖурналыДокументов Цикл
        ОписаниеЖурналаДокументов = ОписаниеЖурналаДокументов(ЖурналДокументов);
        МетаданныеЖурналовДокументов.Добавить(ОписаниеЖурналаДокументов);
    КонецЦикла;
    
    Возврат МетаданныеЖурналовДокументов;
    
КонецФункции

// 
////
Функция МетаданныеПеречислений() Экспорт 
    
    МетаданныеПеречислений = Новый Массив;
    
    Для Каждого Перечисление Из Метаданные.Перечисления Цикл
        ОписаниеПеречисления = ОписаниеПеречисления(Перечисление);
        МетаданныеПеречислений.Добавить(ОписаниеПеречисления);
    КонецЦикла;
    
    Возврат МетаданныеПеречислений;
    
КонецФункции

// 
////
Функция МетаданныеОтчетов() Экспорт 
    
    МетаданныеОтчетов = Новый Массив;
    
    Для Каждого Отчет Из Метаданные.Отчеты Цикл
        ОписаниеОтчета = ОписаниеОтчета(Отчет);
        МетаданныеОтчетов.Добавить(ОписаниеОтчета);
    КонецЦикла;
    
    Возврат МетаданныеОтчетов;
    
КонецФункции

// 
////
Функция МетаданныеОбработок() Экспорт 
    
    МетаданныеОбработок = Новый Массив;
    
    Для Каждого Обработка Из Метаданные.Обработки Цикл
        ОписаниеОбработки = ОписаниеОбработки(Обработка);
        МетаданныеОбработок.Добавить(ОписаниеОбработки);
    КонецЦикла;
    
    Возврат МетаданныеОбработок;
    
КонецФункции

// 
////
Функция МетаданныеПлановВидовХарактеристик() Экспорт 
    
    МетаданныеПлановВидовХарактеристик = Новый Массив;
    
    Для Каждого ПланВидовХарактеристик Из Метаданные.ПланыВидовХарактеристик Цикл
        ОписаниеПланаВидовХарактеристик = ОписаниеПланаВидовХарактеристик(ПланВидовХарактеристик);
        МетаданныеПлановВидовХарактеристик.Добавить(ОписаниеПланаВидовХарактеристик);
    КонецЦикла;
    
    Возврат МетаданныеПлановВидовХарактеристик;
    
КонецФункции

// 
////
Функция МетаданныеПлановСчетов() Экспорт 
    
    МетаданныеПлановСчетов = Новый Массив;
    
    Для Каждого ПланСчетов Из Метаданные.ПланыСчетов Цикл
        ОписаниеПланаСчетов = ОписаниеПланаСчетов(ПланСчетов);
        МетаданныеПлановСчетов.Добавить(ОписаниеПланаСчетов);
    КонецЦикла;
    
    Возврат МетаданныеПлановСчетов;
    
КонецФункции

// 
////
Функция МетаданныеПлановВидовРасчета() Экспорт 
    
    МетаданныеПлановВидовРасчета = Новый Массив;
    
    Для Каждого ПланВидовРасчета Из Метаданные.ПланыВидовРасчета Цикл
        ОписаниеПланаВидовРасчета = ОписаниеПланаВидовРасчета(ПланВидовРасчета);
        МетаданныеПлановВидовРасчета.Добавить(ОписаниеПланаВидовРасчета);
    КонецЦикла;
    
    Возврат МетаданныеПлановВидовРасчета;
    
КонецФункции

// 
////
Функция МетаданныеРегистровСведений() Экспорт 
    
    МетаданныеРегистровСведений = Новый Массив;
    
    Для Каждого РегистрСведений Из Метаданные.РегистрыСведений Цикл
        ОписаниеРегистраСведений = ОписаниеРегистраСведений(РегистрСведений);
        МетаданныеРегистровСведений.Добавить(ОписаниеРегистраСведений);
    КонецЦикла;
    
    Возврат МетаданныеРегистровСведений;
    
КонецФункции

// 
////
Функция МетаданныеРегистровНакопления() Экспорт 
    
    МетаданныеРегистровНакопления = Новый Массив;
    
    Для Каждого РегистрНакопления Из Метаданные.РегистрыНакопления Цикл
        ОписаниеРегистраНакопления = ОписаниеРегистраНакопления(РегистрНакопления);
        МетаданныеРегистровНакопления.Добавить(ОписаниеРегистраНакопления);
    КонецЦикла;
    
    Возврат МетаданныеРегистровНакопления;
    
КонецФункции

// 
////
Функция МетаданныеРегистровБухгалтерии() Экспорт 
    
    МетаданныеРегистровБухгалтерии = Новый Массив;
    
    Для Каждого РегистрБухгалтерии Из Метаданные.РегистрыБухгалтерии Цикл
        ОписаниеРегистраБухгалтерии = ОписаниеРегистраБухгалтерии(РегистрБухгалтерии);
        МетаданныеРегистровБухгалтерии.Добавить(ОписаниеРегистраБухгалтерии);
    КонецЦикла;
    
    Возврат МетаданныеРегистровБухгалтерии;
    
КонецФункции

// 
////
Функция МетаданныеРегистровРасчетов() Экспорт 
    
    МетаданныеРегистровРасчетов = Новый Массив;
    
    Для Каждого РегистрРасчетов Из Метаданные.РегистрыРасчета Цикл
        ОписаниеРегистраРасчетов = ОписаниеРегистраРасчетов(РегистрРасчетов);
        МетаданныеРегистровРасчетов.Добавить(ОписаниеРегистраРасчетов);
    КонецЦикла;
    
    Возврат МетаданныеРегистровРасчетов;
    
КонецФункции

// 
////
Функция МетаданныеБизнесПроцессов() Экспорт 
    
    МетаданныеБизнесПроцессов = Новый Массив;
    
    Для Каждого БизнесПроцесс Из Метаданные.БизнесПроцессы Цикл
        ОписаниеБизнесПроцесса = ОписаниеБизнесПроцесса(БизнесПроцесс);
        МетаданныеБизнесПроцессов.Добавить(ОписаниеБизнесПроцесса);
    КонецЦикла;
    
    Возврат МетаданныеБизнесПроцессов;
    
КонецФункции

// 
////
Функция МетаданныеЗадач() Экспорт 
    
    МетаданныеЗадач = Новый Массив;
    
    Для Каждого Документ Из Метаданные.Задачи Цикл
        ОписаниеЗадачи = ОписаниеЗадачи(Документ);
        МетаданныеЗадач.Добавить(ОписаниеЗадачи);
    КонецЦикла;
    
    Возврат МетаданныеЗадач;
    
КонецФункции

// 
////
Функция МетаданныеПлановОбмена() Экспорт 
    
    МетаданныеПлановОбмена = Новый Массив;
    
    Для Каждого ПланОбмена Из Метаданные.ПланыОбмена Цикл
        ОписаниеПланаОбмена = ОписаниеПланаОбмена(ПланОбмена);
        МетаданныеПлановОбмена.Добавить(ОписаниеПланаОбмена);
    КонецЦикла;
    
    Возврат МетаданныеПлановОбмена;
    
КонецФункции

// 
////
Функция МетаданныеКритерийОтбора() Экспорт 
    
    МетаданныеКритерийОтбора = Новый Массив;
    
    Для Каждого КритерийОтбора Из Метаданные.КритерииОтбора Цикл
        ОписаниеКритерияОтбора = ОписаниеКритерияОтбора(КритерийОтбора);
        МетаданныеКритерийОтбора.Добавить(ОписаниеКритерияОтбора);
    КонецЦикла;
    
    Возврат МетаданныеКритерийОтбора;
    
КонецФункции

// 
////
Функция МетаданныеХранилищНастроек() Экспорт 
    
    МетаданныеХранилищНастроек = Новый Массив;
    
    Для Каждого ХранилищеНастроек Из Метаданные.ХранилищаНастроек Цикл
        ОписаниеХранилищаНастроек = ОписаниеХранилищаНастроек(ХранилищеНастроек);
        МетаданныеХранилищНастроек.Добавить(ОписаниеХранилищаНастроек);
    КонецЦикла;
    
    Возврат МетаданныеХранилищНастроек;
    
КонецФункции

// 
////
Функция МетаданныеОбщихМакетов() Экспорт 
    
    МетаданныеОбщихМакетов = Новый Массив;
    
    Для Каждого ОбщийМакет Из Метаданные.ОбщиеМакеты Цикл
        Если ЭтоМакетСКД(ОбщийМакет) Тогда
            ОписаниеОбщегоМакета = ОписаниеОбщегоМакета(ОбщийМакет);
            МетаданныеОбщихМакетов.Добавить(ОписаниеОбщегоМакета);
        КонецЕсли;
    КонецЦикла;
    
    Возврат МетаданныеОбщихМакетов;
    
КонецФункции

#КонецОбласти

// TODO 
////
Функция МенеджерОбьекта(Тип, Имя) Экспорт 
    
    Если Тип = "Справочник" Тогда
        Менеджер = Справочники;
    ИначеЕсли Тип = "Документ" Тогда
        Менеджер = Документы;
    ИначеЕсли Тип = "ЖурналДокументов" Тогда
        Менеджер = ЖурналыДокументов;
    ИначеЕсли Тип = "Перечисление" Тогда
        Менеджер = Перечисления;
    ИначеЕсли Тип = "Отчет" Тогда
        Менеджер = Отчеты;
    ИначеЕсли Тип = "Обработка" Тогда
        Менеджер = Обработки;
    ИначеЕсли Тип = "ПланВидовХарактеристик" Тогда
        Менеджер = ПланыВидовХарактеристик;
    ИначеЕсли Тип = "ПланСчетов" Тогда
        Менеджер = ПланыСчетов;
    ИначеЕсли Тип = "ПланВидовРасчета" Тогда
        Менеджер = ПланыВидовРасчета;
    ИначеЕсли Тип = "РегистрСведений" Тогда
        Менеджер = РегистрыСведений;
    ИначеЕсли Тип = "РегистрНакопления" Тогда
        Менеджер = РегистрыНакопления;
    ИначеЕсли Тип = "РегистрБухгалтерии" Тогда
        Менеджер = РегистрыБухгалтерии;
    ИначеЕсли Тип = "РегистрРасчета" Тогда
        Менеджер = РегистрыРасчета;
    ИначеЕсли Тип = "БизнесПроцесс" Тогда
        Менеджер = БизнесПроцессы;
    ИначеЕсли Тип = "Задача" Тогда
        Менеджер = Задачи;
    ИначеЕсли Тип = "ПланОбмена" Тогда
        Менеджер = ПланыОбмена;
    ИначеЕсли Тип = "КритерийОтбора" Тогда
        Менеджер = КритерииОтбора;
    ИначеЕсли Тип = "ХранилищеНастроек" Тогда
        Менеджер = ХранилищаНастроек;
    Иначе
        ВызватьИсключение "Неизвестный тип метаданнных";
    КонецЕсли;
    
    Возврат Менеджер[Имя];
    
КонецФункции

// 
////
Функция ПолноеИмя(Тип, Имя) Экспорт 
    
    Возврат СтрШаблон("%1.%2", Тип, Имя);
    
КонецФункции

// 
////
Функция КлючевыеПоляЗаписи(Тип, Имя) Экспорт 
    
    ПолноеИмя = ПолноеИмя(Тип, Имя);
    ТекущиеМетаданные = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
    КлючевыеПоляЗаписи = Новый Массив;
    
    Для Каждого Измерение Из ТекущиеМетаданные.Измерения Цикл
        КлючевыеПоляЗаписи.Добавить(Измерение.Имя);
    КонецЦикла;
    
    Если ТекущиеМетаданные.СтандартныеРеквизиты <> Неопределено Тогда
        Для Каждого СтандартныйРеквизит Из ТекущиеМетаданные.СтандартныеРеквизиты Цикл
            КлючевыеПоляЗаписи.Добавить(СтандартныйРеквизит.Имя);
        КонецЦикла;
    КонецЕсли;
    
    Возврат КлючевыеПоляЗаписи;
    
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыиФункции

#Область ОписаниеМетаданных

// 
////
Функция ОписаниеСправочника(Справочник) 
    
    ОписаниеМетаданных = ОписаниеМетаданных(Справочник);
    ОписаниеМетаданных.Иерархический = ЭтоИерархическийСправочник(Справочник);
    ОписаниеМетаданных.Подчиненный = ЭтоПодчиненныйСправочник(Справочник);
    ЗаполнитьМакетыСКД(Справочник, ОписаниеМетаданных);
    Возврат ОписаниеМетаданных;
    
КонецФункции

// 
////
Функция ОписаниеДокумента(Документ) 
    
    ОписаниеМетаданных = ОписаниеМетаданных(Документ);
    ОписаниеМетаданных.Проведение = ЭтоПроводимыйДокумент(Документ);
    ЗаполнитьМакетыСКД(Документ, ОписаниеМетаданных);
    Возврат ОписаниеМетаданных;
    
КонецФункции

// 
////
Функция ОписаниеЖурналаДокументов(ЖурналДокументов) 
    
    ОписаниеМетаданных = ОписаниеМетаданных(ЖурналДокументов);
    ЗаполнитьМакетыСКД(ЖурналДокументов, ОписаниеМетаданных);
    Возврат ОписаниеМетаданных;
    
КонецФункции

// 
////
Функция ОписаниеПеречисления(Перечисление) 
    
    ОписаниеМетаданных = ОписаниеМетаданных(Перечисление);
    ЗаполнитьМакетыСКД(Перечисление, ОписаниеМетаданных);
    Возврат ОписаниеМетаданных;
    
КонецФункции

// 
////
Функция ОписаниеОтчета(Отчет) 
    
    ОписаниеМетаданных = ОписаниеМетаданных(Отчет);
    ЗаполнитьМакетыСКД(Отчет, ОписаниеМетаданных);
    Возврат ОписаниеМетаданных;
    
КонецФункции

// 
////
Функция ОписаниеОбработки(Обработка) 
    
    ОписаниеМетаданных = ОписаниеМетаданных(Обработка);
    ЗаполнитьМакетыСКД(Обработка, ОписаниеМетаданных);
    Возврат ОписаниеМетаданных;
    
КонецФункции

// 
////
Функция ОписаниеПланаВидовХарактеристик(ПланВидовХарактеристик) 
    
    ОписаниеМетаданных = ОписаниеМетаданных(ПланВидовХарактеристик);
    ОписаниеМетаданных.Иерархический = ЭтоИерархическийПланВидовХарактеристик(ПланВидовХарактеристик);
    ЗаполнитьМакетыСКД(ПланВидовХарактеристик, ОписаниеМетаданных);
    Возврат ОписаниеМетаданных;
    
КонецФункции

// 
////
Функция ОписаниеПланаСчетов(ПланСчетов) 
    
    ОписаниеМетаданных = ОписаниеМетаданных(ПланСчетов);
    ЗаполнитьМакетыСКД(ПланСчетов, ОписаниеМетаданных);
    Возврат ОписаниеМетаданных;
    
КонецФункции

// 
////
Функция ОписаниеПланаВидовРасчета(ПланВидовРасчета) 
    
    ОписаниеМетаданных = ОписаниеМетаданных(ПланВидовРасчета);
    ЗаполнитьМакетыСКД(ПланВидовРасчета, ОписаниеМетаданных);
    Возврат ОписаниеМетаданных;
    
КонецФункции

// 
////
Функция ОписаниеРегистраСведений(РегистрСведений) 
    
    ОписаниеМетаданных = ОписаниеМетаданных(РегистрСведений);
    ОписаниеМетаданных.Подчиненный = ЭтоПодчиненныйРегистрСведений(РегистрСведений);
    ОписаниеМетаданных.Периодический = ЭтоПериодическийРегистрСведений(РегистрСведений);
    ЗаполнитьМакетыСКД(РегистрСведений, ОписаниеМетаданных);
    Возврат ОписаниеМетаданных;
    
КонецФункции

// 
////
Функция ОписаниеРегистраНакопления(РегистрНакопления) 
    
    ОписаниеМетаданных = ОписаниеМетаданных(РегистрНакопления);
    ЗаполнитьМакетыСКД(РегистрНакопления, ОписаниеМетаданных);
    Возврат ОписаниеМетаданных;
    
КонецФункции

// 
////
Функция ОписаниеРегистраБухгалтерии(РегистрБухгалтерии) 
    
    ОписаниеМетаданных = ОписаниеМетаданных(РегистрБухгалтерии);
    ЗаполнитьМакетыСКД(РегистрБухгалтерии, ОписаниеМетаданных);
    Возврат ОписаниеМетаданных;
    
КонецФункции

// 
////
Функция ОписаниеРегистраРасчетов(РегистрРасчетов) 
    
    ОписаниеМетаданных = ОписаниеМетаданных(РегистрРасчетов);
    ЗаполнитьМакетыСКД(РегистрРасчетов, ОписаниеМетаданных);
    Возврат ОписаниеМетаданных;
    
КонецФункции

// 
////
Функция ОписаниеБизнесПроцесса(БизнесПроцесс) 
    
    ОписаниеМетаданных = ОписаниеМетаданных(БизнесПроцесс);
    ЗаполнитьМакетыСКД(БизнесПроцесс, ОписаниеМетаданных);
    Возврат ОписаниеМетаданных;
    
КонецФункции

// 
////
Функция ОписаниеЗадачи(Задача) 
    
    ОписаниеМетаданных = ОписаниеМетаданных(Задача);
    ЗаполнитьМакетыСКД(Задача, ОписаниеМетаданных);
    Возврат ОписаниеМетаданных;
    
КонецФункции

// 
////
Функция ОписаниеПланаОбмена(ПланОбмена) 
    
    ОписаниеМетаданных = ОписаниеМетаданных(ПланОбмена);
    ЗаполнитьМакетыСКД(ПланОбмена, ОписаниеМетаданных);
    Возврат ОписаниеМетаданных;
    
КонецФункции

// 
////
Функция ОписаниеКритерияОтбора(КритерийОтбора) 
    
    Возврат ОписаниеМетаданных(КритерийОтбора);
    
КонецФункции

// 
////
Функция ОписаниеХранилищаНастроек(ХранилищеНастроек) 
    
    ОписаниеМетаданных = ОписаниеМетаданных(ХранилищеНастроек);
    ЗаполнитьМакетыСКД(ХранилищеНастроек, ОписаниеМетаданных);
    Возврат ОписаниеМетаданных;
    
КонецФункции

// 
////
Функция ОписаниеОбщегоМакета(ОбщийМакет) 
    
    Возврат ОписаниеМетаданных(ОбщийМакет);
    
КонецФункции

// 
////
Функция ОписаниеМетаданных(ОбъектМетаданных) 
    
    ОписаниеМетаданных = Новый Структура;
    ОписаниеМетаданных.Вставить("Идентификатор", ИдентификаторМетаданных(ОбъектМетаданных));
    ОписаниеМетаданных.Вставить("Тип", ТипМетаданных(ОбъектМетаданных));
    ОписаниеМетаданных.Вставить("Имя", ОбъектМетаданных.Имя);
    ОписаниеМетаданных.Вставить("Представление", ОбъектМетаданных.Представление());
    ОписаниеМетаданных.Вставить("Иерархический", Ложь);
    ОписаниеМетаданных.Вставить("Подчиненный", Ложь);
    ОписаниеМетаданных.Вставить("Периодический", Ложь);
    ОписаниеМетаданных.Вставить("Проведение", Ложь);
    ОписаниеМетаданных.Вставить("МакетыСКД", Новый Массив);
    Возврат ОписаниеМетаданных;
    
КонецФункции

// 
////
Процедура ЗаполнитьМакетыСКД(ОбъектМетаданных, ОписаниеМетаданных) 
    
    Для Каждого Макет Из ОбъектМетаданных.Макеты Цикл
        Если ЭтоМакетСКД(Макет) Тогда
            ОписаниеМетаданных.МакетыСКД.Добавить(Макет.Имя);
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры

#КонецОбласти

// 
////
Функция ЭтоИерархическийСправочник(Справочник) 
    
    Возврат Справочник.Иерархический
        И Строка(Справочник.ВидИерархии) = "ИерархияГруппИЭлементов";
    
КонецФункции

// 
////
Функция ЭтоПодчиненныйСправочник(Справочник) 
    
    Возврат Справочник.Владельцы.Количество() > 0;
    
КонецФункции

// 
////
Функция ЭтоПроводимыйДокумент(Документ) 
    
    Возврат Строка(Документ.Проведение) = "Разрешить";
    
КонецФункции

// 
////
Функция ЭтоИерархическийПланВидовХарактеристик(ПланВидовХарактеристик) 
    
    Возврат ПланВидовХарактеристик.Иерархический;
    
КонецФункции

// 
////
Функция ЭтоПериодическийРегистрСведений(РегистрСведений) 
    
    Возврат Строка(РегистрСведений.ПериодичностьРегистраСведений) <> "Непериодический";
    
КонецФункции

// 
////
Функция ЭтоПодчиненныйРегистрСведений(РегистрСведений) 
    
    Возврат РегистрСведений.РежимЗаписи = "ПодчинениеРегистратору";
    
КонецФункции

// 
////
Функция ЭтоМакетСКД(Макет) 
    
    Возврат Макет.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.СхемаКомпоновкиДанных;
    
КонецФункции

// 
////
Функция ИдентификаторМетаданных(ОбъектМетаданных) 
    
    Возврат ОбъектМетаданных.ПолноеИмя();
    
КонецФункции

// 
////
Функция ТипМетаданных(ОбъектМетаданных) 
    
    ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
    ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
    Возврат ЧастиИмени[0];
    
КонецФункции

#КонецОбласти
